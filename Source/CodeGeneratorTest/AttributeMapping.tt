<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ Include File="MultipleOutputHelper.ttinclude" #>
<#@ Assembly Name="$(TargetDir)NLite.dll" #>
<#@ Assembly Name="$(TargetDir)ELinq.dll" #>
<#@ Assembly Name="System.Data" #>
<#@ Import Namespace="NLite.Data" #>
<#@ Import Namespace="NLite.Data.CodeGeneration" #>
<#@ output extension=".cs" #>
<#
	 //创建多文件管理器
	var manager = MultipleFileManager.Create(Host, GenerationEnvironment);
    
    //定义代码生成的命名空间，大家可以根据需要自行修改
	var @namespace = manager.DefaultProjectNamespace+".Models";
    
    //定义定义连接字符串名称
    var connectionStringName = "Northwind";

    //定义DbContext名称-通过模版文件名得到
    var dbContextName = Host.TemplateFile.Split('\\')[Host.TemplateFile.Split('\\').Length -1].TrimEnd('.','t');
    
    //读取App.config或Web.config中连接字符串信息
    var connectionStringSetting = GetConnectionStringSettings(connectionStringName);
    
    //得到配置文件中的连接字符串
    var connectionString = connectionStringSetting.ConnectionString;
    
    //得到DbProviderName 
    var dbProviderName = connectionStringSetting.ProviderName;

    //通过连接字符串和dbProviderName 名称来配置ELinq的dbConfiguration
    var dbConfiguration = DbConfiguration.Configure(connectionString, dbProviderName);
    
    //通过dbConfiguration 获取数据库的Schema,备注：当前仅仅支持表和视图 
    var databaseSchema = dbConfiguration.Schema;

    var tables = databaseSchema.Tables.Union(databaseSchema.Views);

    //定义命名约定对象（表名到类名转换约定，列名到字段或属性名转换约定等）
    var namingConversion = NamingConversion.Default;
   
    manager.StartHeader();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using NLite.Data;
namespace <#= @namespace #>
{
<#
	manager.EndBlock();
#>
	using NLite.Reflection;

	public partial class <#= dbContextName #>:DbContext
	{
		//连接字符串名称：基于Config文件中连接字符串的配置
        const string connectionStringName = "<#= connectionStringName #>";

        //构造dbConfiguration 对象
        static DbConfiguration dbConfiguration;

		static <#= dbContextName #>()
		{
			 dbConfiguration = DbConfiguration
                  .Configure(connectionStringName)
                  .SetSqlLogger(() =>SqlLog.Debug)
				  .AddFromAssemblyOf<<#= dbContextName #>>(t=>t.HasAttribute<TableAttribute>(false))
				  ;
		}

		public <#= dbContextName #>():base(dbConfiguration){}
		
<#foreach (var tb in databaseSchema.Tables.Union(databaseSchema.Views)){#>
		public IDbSet<<#=NamingConversion.Default.ClassName(tb.TableName)  #>> <#= NamingConversion.Default.QueryableName(tb.TableName) #> { get; private set; }
<#}#>
	}
<#foreach (var tb in databaseSchema.Tables){
		manager.StartNewFile(NamingConversion.Default.ClassName(tb.TableName) + ".cs");#>
	[Table("<#= tb.TableName #>")]
	public partial class <#= NamingConversion.Default.ClassName( tb.TableName) #> 
	{
<#foreach (var col in tb.PrimaryKeys){#>	
		[Id("<#= col.ColumnName#>",IsDbGenerated=<#= col.IsGenerated.ToString().ToLower() #>)]
		public <#= NamingConversion.Default.DataType(col) #> <#= NamingConversion.Default.PropertyName(col.ColumnName) #> { get;set; }
<#}#> 
<#foreach (var col in tb.Columns){#>
		[Column("<#= col.ColumnName#>")]
		public <#= NamingConversion.Default.DataType(col) #> <#= NamingConversion.Default.PropertyName(col.ColumnName) #> { get;set; }
<#}#> 
<#foreach (var fk in tb.ForeignKeys){#>
		[ManyToOne(ThisKey="<#= NamingConversion.Default.PropertyName( fk.ThisKey.ColumnName) #>",OtherKey="<#= NamingConversion.Default.PropertyName(fk.OtherKey.ColumnName) #>")]
		public <#= NamingConversion.Default.ClassName(fk.OtherTable.TableName) #> <#= NamingConversion.Default.ManyToOneName(fk) #> { get;set; }
<#}#> 
<#foreach (var fk in tb.Children){#>
		[OneToMany(ThisKey="<#= NamingConversion.Default.PropertyName( fk.ThisKey.ColumnName) #>",OtherKey="<#= NamingConversion.Default.PropertyName(fk.OtherKey.ColumnName) #>")]
		public IList<<#= NamingConversion.Default.ClassName(fk.OtherTable.TableName) #>> <#= NamingConversion.Default.QueryableName(fk.OtherTable.TableName) #> { get;set; }
<#}#> 
	}
<# } manager.EndBlock();
 foreach (var tb in databaseSchema.Views){
	 manager.StartNewFile(NamingConversion.Default.ClassName(tb.TableName) + ".generated.cs");#>
	[Table("<#= tb.TableName #>",Readonly=true)]
	public partial class <#= NamingConversion.Default.ClassName( tb.TableName) #> 
	{
<#foreach (var col in tb.Columns){#>
		[Column("<#= col.ColumnName#>")]
		public <#= col.Type.Name #> <#= NamingConversion.Default.PropertyName(col.ColumnName) #> { get;set; }
<#}#> 
	}
<# 
	} manager.EndBlock();
	manager.StartFooter();
#>
}
<#
 manager.EndBlock();
 manager.Process(true);
#>